{"ast":null,"code":"const validateInput = val => {\n  var isPoundPresent = false;\n  var isSymbolPresent = false; //validation of values starts with checking empty string.\n\n  if (val == '') {\n    return 'Empty String';\n  } //checking if £ symbol is present if yes then checking if it is at start position \n  //if £ symbol present but not at start positing then show error\n\n\n  if (val.indexOf('£') !== -1) {\n    if (val.includes('£', 0)) {\n      console.log(val.substring(1, val.length));\n      val = val.substring(1, val.length);\n      isPoundPresent = true;\n      isSymbolPresent = true;\n    } else {\n      alert('Enter valid amount');\n      return;\n    }\n  } //checking if p symbol is present if yes then checking if it is at start position \n  //if p symbol present but not at start positing then show error\n\n\n  if (val.indexOf('p') != -1) {\n    if (val.includes('p', val.length - 1)) {\n      console.log(val.substring(0, val.length - 1));\n      val = val.substring(0, val.length - 1);\n      isSymbolPresent = true;\n    } else {\n      alert('Enter valid amount');\n      return;\n    }\n  } //after removing the symbols from entered value checking if still it is a valid number \n  //if not then show error according to the conditions if symbol is present then show different error.\n\n\n  if (isNaN(val)) {\n    if (!isSymbolPresent) alert('Non-numeric, non-symbol character');else alert('Non-numeric, non-symbol character along with valid symbols');\n    return;\n  } //checking if removing symbols still digits exists if not then show error.\n  else if (val == '') {\n      alert('Missing digits');\n      return;\n    } //if index of '.' is greater then 0 that means a digits is present before '.' which means £ is present.\n\n\n  if (val.indexOf('.') > 0) {\n    isPoundPresent = true;\n  } //if £ is present then convert values to pennes.\n\n\n  if (isPoundPresent) val = parseFloat(val * 100);\n  return val;\n};\n\nexport default validateInput;","map":{"version":3,"sources":["D:/Coding Exercise/coding-exercise/src/screens/Util.js"],"names":["validateInput","val","isPoundPresent","isSymbolPresent","indexOf","includes","console","log","substring","length","alert","isNaN","parseFloat"],"mappings":"AACA,MAAMA,aAAa,GAAIC,GAAD,IAAQ;AAExB,MAAIC,cAAc,GAAG,KAArB;AACA,MAAIC,eAAe,GAAG,KAAtB,CAHwB,CAKxB;;AACA,MAAGF,GAAG,IAAI,EAAV,EACA;AACE,WAAO,cAAP;AACD,GATuB,CAWxB;AACA;;;AACA,MAAGA,GAAG,CAACG,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAzB,EAA4B;AAC1B,QAAGH,GAAG,CAACI,QAAJ,CAAa,GAAb,EAAkB,CAAlB,CAAH,EACA;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACO,SAAJ,CAAc,CAAd,EAAgBP,GAAG,CAACQ,MAApB,CAAZ;AACAR,MAAAA,GAAG,GAAGA,GAAG,CAACO,SAAJ,CAAc,CAAd,EAAgBP,GAAG,CAACQ,MAApB,CAAN;AACAP,MAAAA,cAAc,GAAG,IAAjB;AACAC,MAAAA,eAAe,GAAE,IAAjB;AACD,KAND,MAQA;AACEO,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACA;AACD;AACF,GA1BuB,CA4BxB;AACA;;;AACA,MAAGT,GAAG,CAACG,OAAJ,CAAY,GAAZ,KAAoB,CAAC,CAAxB,EACA;AACE,QAAGH,GAAG,CAACI,QAAJ,CAAa,GAAb,EAAkBJ,GAAG,CAACQ,MAAJ,GAAW,CAA7B,CAAH,EACA;AACEH,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACO,SAAJ,CAAc,CAAd,EAAgBP,GAAG,CAACQ,MAAJ,GAAW,CAA3B,CAAZ;AACAR,MAAAA,GAAG,GAAGA,GAAG,CAACO,SAAJ,CAAc,CAAd,EAAgBP,GAAG,CAACQ,MAAJ,GAAW,CAA3B,CAAN;AACAN,MAAAA,eAAe,GAAE,IAAjB;AACD,KALD,MAOA;AACEO,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACA;AACD;AACF,GA3CuB,CA6CxB;AACA;;;AACA,MAAGC,KAAK,CAACV,GAAD,CAAR,EACA;AACE,QAAG,CAACE,eAAJ,EACEO,KAAK,CAAC,mCAAD,CAAL,CADF,KAGEA,KAAK,CAAC,4DAAD,CAAL;AACF;AACD,GAPD,CAQA;AARA,OASK,IAAGT,GAAG,IAAI,EAAV,EACL;AACES,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACA;AACD,KA5DuB,CA8DxB;;;AACA,MAAGT,GAAG,CAACG,OAAJ,CAAY,GAAZ,IAAmB,CAAtB,EACA;AACEF,IAAAA,cAAc,GAAG,IAAjB;AACD,GAlEuB,CAoExB;;;AACA,MAAGA,cAAH,EACED,GAAG,GAAGW,UAAU,CAACX,GAAG,GAAC,GAAL,CAAhB;AAEJ,SAAOA,GAAP;AACH,CAzED;;AA2EA,eAAeD,aAAf","sourcesContent":["\r\nconst validateInput = (val) =>{\r\n    \r\n      var isPoundPresent = false;\r\n      var isSymbolPresent = false;\r\n\r\n      //validation of values starts with checking empty string.\r\n      if(val == '')\r\n      {\r\n        return 'Empty String';\r\n      }\r\n         \r\n      //checking if £ symbol is present if yes then checking if it is at start position \r\n      //if £ symbol present but not at start positing then show error\r\n      if(val.indexOf('£') !== -1 ){\r\n        if(val.includes('£', 0))\r\n        {\r\n          console.log(val.substring(1,val.length));\r\n          val = val.substring(1,val.length);\r\n          isPoundPresent = true;\r\n          isSymbolPresent= true;\r\n        }\r\n        else\r\n        {\r\n          alert('Enter valid amount');\r\n          return;\r\n        }\r\n      }\r\n\r\n      //checking if p symbol is present if yes then checking if it is at start position \r\n      //if p symbol present but not at start positing then show error\r\n      if(val.indexOf('p') != -1)\r\n      {\r\n        if(val.includes('p', val.length-1))\r\n        {\r\n          console.log(val.substring(0,val.length-1));\r\n          val = val.substring(0,val.length-1);\r\n          isSymbolPresent= true;\r\n        }\r\n        else\r\n        {\r\n          alert('Enter valid amount');\r\n          return;\r\n        }\r\n      }\r\n\r\n      //after removing the symbols from entered value checking if still it is a valid number \r\n      //if not then show error according to the conditions if symbol is present then show different error.\r\n      if(isNaN(val))\r\n      {\r\n        if(!isSymbolPresent)\r\n          alert('Non-numeric, non-symbol character');\r\n        else\r\n          alert('Non-numeric, non-symbol character along with valid symbols');\r\n        return;\r\n      }\r\n      //checking if removing symbols still digits exists if not then show error.\r\n      else if(val == '')\r\n      {\r\n        alert('Missing digits');\r\n        return;\r\n      }\r\n\r\n      //if index of '.' is greater then 0 that means a digits is present before '.' which means £ is present.\r\n      if(val.indexOf('.') > 0)\r\n      {\r\n        isPoundPresent = true;\r\n      }\r\n      \r\n      //if £ is present then convert values to pennes.\r\n      if(isPoundPresent)\r\n        val = parseFloat(val*100);\r\n\r\n    return val;\r\n}\r\n\r\nexport default validateInput;"]},"metadata":{},"sourceType":"module"}