{"ast":null,"code":"const validateInput = val => {\n  var isPoundPresent = false;\n  var isSymbolPresent = false; //validation of values starts with checking empty string.\n\n  if (val == '') return 'Empty String'; //checking if £ symbol is present if yes then checking if it is at start position \n  //if £ symbol present but not at start positing then show error\n\n  if (val.indexOf('£') !== -1) {\n    if (val.includes('£', 0)) {\n      val = val.substring(1, val.length);\n      isPoundPresent = true;\n      isSymbolPresent = true;\n    } else return 'Enter valid amount';\n  } //checking if p symbol is present if yes then checking if it is at start position \n  //if p symbol present but not at start positing then show error\n\n\n  if (val.indexOf('p') != -1) {\n    if (val.includes('p', val.length - 1)) {\n      val = val.substring(0, val.length - 1);\n      isSymbolPresent = true;\n    } else return 'Enter valid amount';\n  } //after removing the symbols from entered value checking if still it is a valid number \n  //if not then show error according to the conditions if symbol is present then show different error.\n\n\n  if (isNaN(val)) {\n    if (!isSymbolPresent) return 'Non-numeric, non-symbol character';else return 'Non-numeric, non-symbol character along with valid symbol';\n  } //checking if removing symbols still digits exists if not then show error.\n  else if (val == '') return 'Missing digits'; //if index of '.' is greater then 0 that means a digits is present before '.' which means £ is present.\n\n\n  if (val.indexOf('.') > 0) isPoundPresent = true; //if £ is present then convert values to pennes.\n\n  if (isPoundPresent) val = parseFloat(val * 100);\n  return val;\n};\n\nconst testSamples = val => {\n  currentVal = val;\n  val = validateInput(val);\n\n  if (isNaN(val)) {\n    console.log(val);\n    return;\n  } //defined a hardcoded array of required calculation against values are to be checked.\n\n\n  var arr = [200, 100, 50, 20, 10, 5, 2, 1];\n\n  for (var i = 0; i < arr.length; i++) {\n    //dividing value against each value in array.\n    //if response is greater than 0 then add it in table rows and then multiply the response from divide with the array position value minus the actual value.\n    //update that to actual value and use that value to iterate other missing array elements.\n    var strRes = 'currentVal =';\n    var remainder = parseInt(val / arr[i]);\n\n    if (remainder != \"0\") {\n      val = val - remainder * arr[i];\n      if (arr[i] == 100) arr[i] = '₤1';else if (arr[i] == 200) arr[i] = '₤2';else arr[i] = arr[i] + 'p';\n      strRes = strRes + arr[i] + \" X \" + remainder + \" \";\n    }\n\n    console.log(strRes);\n  }\n};\n\nexport { validateInput, testSamples };","map":{"version":3,"sources":["D:/Coding Exercise/coding-exercise/src/screens/Util.js"],"names":["validateInput","val","isPoundPresent","isSymbolPresent","indexOf","includes","substring","length","isNaN","parseFloat","testSamples","currentVal","console","log","arr","i","strRes","remainder","parseInt"],"mappings":"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","sourcesContent":["\r\nconst validateInput = (val) =>{\r\n    \r\n      var isPoundPresent = false;\r\n      var isSymbolPresent = false;\r\n\r\n      //validation of values starts with checking empty string.\r\n      if(val == '')\r\n        return 'Empty String';\r\n         \r\n      //checking if £ symbol is present if yes then checking if it is at start position \r\n      //if £ symbol present but not at start positing then show error\r\n      if(val.indexOf('£') !== -1 ){\r\n        if(val.includes('£', 0))\r\n        {\r\n          val = val.substring(1,val.length);\r\n          isPoundPresent = true;\r\n          isSymbolPresent= true;\r\n        }\r\n        else\r\n            return 'Enter valid amount';\r\n      }\r\n\r\n      //checking if p symbol is present if yes then checking if it is at start position \r\n      //if p symbol present but not at start positing then show error\r\n      if(val.indexOf('p') != -1)\r\n      {\r\n        if(val.includes('p', val.length-1))\r\n        {\r\n          val = val.substring(0,val.length-1);\r\n          isSymbolPresent= true;\r\n        }\r\n        else\r\n            return 'Enter valid amount';\r\n          \r\n      }\r\n\r\n      //after removing the symbols from entered value checking if still it is a valid number \r\n      //if not then show error according to the conditions if symbol is present then show different error.\r\n      if(isNaN(val))\r\n      {\r\n        if(!isSymbolPresent)\r\n           return 'Non-numeric, non-symbol character';\r\n        else\r\n          return 'Non-numeric, non-symbol character along with valid symbol';\r\n        \r\n      }\r\n      //checking if removing symbols still digits exists if not then show error.\r\n      else if(val == '')\r\n        return 'Missing digits';\r\n\r\n      //if index of '.' is greater then 0 that means a digits is present before '.' which means £ is present.\r\n      if(val.indexOf('.') > 0)\r\n        isPoundPresent = true;\r\n      \r\n      //if £ is present then convert values to pennes.\r\n      if(isPoundPresent)\r\n        val = parseFloat(val*100);\r\n\r\n    return val;\r\n}\r\n\r\nconst testSamples = (val) => {\r\n    currentVal = val;\r\n    val = validateInput(val);\r\n\r\n    if(isNaN(val))\r\n    {\r\n        console.log(val);\r\n        return;\r\n    }\r\n      \r\n      \r\n    //defined a hardcoded array of required calculation against values are to be checked.\r\n    var arr = [200,100,50,20,10,5,2,1];\r\n\r\n    for (var i=0;i<arr.length;i++)\r\n    {\r\n      //dividing value against each value in array.\r\n      //if response is greater than 0 then add it in table rows and then multiply the response from divide with the array position value minus the actual value.\r\n      //update that to actual value and use that value to iterate other missing array elements.\r\n      var strRes = 'currentVal =';\r\n      var remainder = parseInt(val/arr[i]);\r\n      if(remainder!=\"0\")\r\n      {\r\n        val = val - (remainder * arr[i]);\r\n        if(arr[i] == 100)\r\n          arr[i] = '₤1';\r\n        else if(arr[i] == 200)\r\n          arr[i] = '₤2';\r\n        else\r\n          arr[i] = arr[i]+'p';\r\n\r\n        strRes = strRes + arr[i] + \" X \" +remainder +\" \";\r\n      }\r\n      console.log(strRes);\r\n    }\r\n\r\n}\r\n\r\nexport {validateInput,testSamples};"]},"metadata":{},"sourceType":"module"}