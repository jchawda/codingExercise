{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding Exercise\\\\coding-exercise\\\\src\\\\screens\\\\CodingExercise.js\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CodingExercise extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      rows: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    var val = this.state.value;\n    var isPoundPresent = false;\n    var isSymbolPresent = false; //validation of values starts with checking empty string.\n\n    if (val == '') {\n      alert('Empty String');\n      return;\n    } //checking if £ symbol is present if yes then checking if it is at start position \n    //if £ symbol present but not at start positing then show error\n\n\n    if (val.indexOf('£') !== -1) {\n      if (val.includes('£', 0)) {\n        console.log(val.substring(1, val.length));\n        val = val.substring(1, val.length);\n        isPoundPresent = true;\n        isSymbolPresent = true;\n      } else {\n        alert('Enter valid amount');\n        return;\n      }\n    } //checking if p symbol is present if yes then checking if it is at start position \n    //if p symbol present but not at start positing then show error\n\n\n    if (val.indexOf('p') != -1) {\n      if (val.includes('p', val.length - 1)) {\n        console.log(val.substring(0, val.length - 1));\n        val = val.substring(0, val.length - 1);\n        isSymbolPresent = true;\n      } else {\n        alert('Enter valid amount');\n        return;\n      }\n    } //after removing the symbols from entered value checking if still it is a valid number \n    //if not then show error according to the conditions if symbol is present then show different error.\n\n\n    if (isNaN(val)) {\n      if (!isSymbolPresent) alert('Non-numeric, non-symbol character');else alert('Non-numeric, non-symbol character along with valid symbols');\n      return;\n    } //checking if removing symbols still digits exists if not then show error.\n    else if (val == '') {\n        alert('Missing digits');\n        return;\n      } //if index of '.' is greater then 0 that means a digits is present before '.' which means £ is present.\n\n\n    if (val.indexOf('.') > 0) {\n      isPoundPresent = true;\n    } //if £ is present then convert values to pennes.\n\n\n    if (isPoundPresent) val = parseFloat(val * 100); //defined a hardcoded array of required calculation against values are to be checked.\n\n    var arr = [200, 100, 50, 20, 10, 5, 2, 1];\n    var updatedRows = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      //dividing value against each value in array.\n      //if response is greater than 0 then add it in table rows and then multiply the response from divide with the array position value minus the actual value.\n      //update that to actual value and use that value to iterate other missing array elements.\n      var temp = parseInt(val / arr[i]);\n\n      if (temp != \"0\") {\n        console.log(arr[i] + \" \" + temp);\n        val = val - temp * arr[i];\n        if (arr[i] == 100) arr[i] = '₤1';else if (arr[i] == 200) arr[i] = '₤2';else arr[i] = arr[i] + 'p';\n        updatedRows.push({\n          name: arr[i],\n          calories: temp\n        });\n      }\n    } //used state to update the rows dynamically\n\n\n    this.setState({\n      rows: updatedRows\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Coding Exercise :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ProblemStatement, {\n        children: \"Problem Statement :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n        children: [\"Write an application that given a number of pennies will calculate the minimum number of Sterling coins equivalent to that amount.\", \"\\n\", \"Eg. 123p = 1 x \\xA31, 1 x 20p, 1 x 2p, 1 x 1p\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(Rect2, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginTop: \"5%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(InsertValue, {\n              children: \"Insert Value:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.value,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            value: \"Submit\",\n            onClick: () => this.handleSubmit(),\n            style: {\n              marginTop: \"5%\",\n              width: \"15%\",\n              marginLeft: \"60%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          style: {\n            width: '50%',\n            backgroundColor: 'rgba(95,75,139,1)',\n            color: 'rgba(227,159,141,1)',\n            marginLeft: '44px'\n          },\n          \"aria-label\": \"simple table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Sterling coins\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Minimum number of Sterling coins\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: this.state.rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                component: \"th\",\n                scope: \"row\",\n                children: row.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.calories\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 15\n              }, this)]\n            }, row.name, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 13\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nconst Container = styled.div`\n  display: flex;\n  background-color: rgba(95,75,139,1);\n  flex-direction: column;\n  height: 100vh;\n  width: 100vw;\n`;\n_c = Container;\nconst Rect2 = styled.div`\n  width: 572px;\n  height: 179px;\n  background-color: rgba(227,159,141,1);\n  flex-direction: column;\n  display: flex;\n  margin-top: 50px;\n  margin-left: 44px;\n`;\n_c2 = Rect2;\nconst InsertValue = styled.span`\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 700;\n  color: rgba(95,75,139,1);\n  font-size: 18px;\n  margin-top: 46px;\n  margin-left: 14px;\n`;\n_c3 = InsertValue;\nconst Paragraph = styled.span`\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 400;\n  color: rgba(227,159,141,1);\n  font-size: 20px;\n  margin-top: 20px;\n  margin-left: 44px;\n`;\n_c4 = Paragraph;\nconst ProblemStatement = styled.span`\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 400;\n  color: rgba(227,159,141,1);\n  font-size: 31px;\n  margin-top: 20px;\n  margin-left: 44px;\n`;\n_c5 = ProblemStatement;\nconst Title = styled.span`\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 400;\n  color: rgba(227,159,141,1);\n  font-size: 45px;\n  margin-top: 10px;\n  margin-left: 44px;\n`;\n_c6 = Title;\nexport default CodingExercise;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Rect2\");\n$RefreshReg$(_c3, \"InsertValue\");\n$RefreshReg$(_c4, \"Paragraph\");\n$RefreshReg$(_c5, \"ProblemStatement\");\n$RefreshReg$(_c6, \"Title\");","map":{"version":3,"sources":["D:/Coding Exercise/coding-exercise/src/screens/CodingExercise.js"],"names":["React","styled","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","CodingExercise","Component","constructor","props","state","value","rows","handleChange","bind","handleSubmit","event","setState","target","val","isPoundPresent","isSymbolPresent","alert","indexOf","includes","console","log","substring","length","isNaN","parseFloat","arr","updatedRows","i","temp","parseInt","push","name","calories","render","marginTop","width","marginLeft","backgroundColor","color","map","row","Container","div","Rect2","InsertValue","span","Paragraph","ProblemStatement","Title"],"mappings":"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A;AAAA,cAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AA4CC;;AArK0C;;AAwK7C,MAAMU,SAAS,GAAGhD,MAAM,CAACiD,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,CANA;KAAMD,S;AAQN,MAAME,KAAK,GAAGlD,MAAM,CAACiD,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMC,K;AAUN,MAAMC,WAAW,GAAGnD,MAAM,CAACoD,IAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMD,W;AAUN,MAAME,SAAS,GAAGrD,MAAM,CAACoD,IAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMC,S;AAUN,MAAMC,gBAAgB,GAAGtD,MAAM,CAACoD,IAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAME,gB;AAUN,MAAMC,KAAK,GAAGvD,MAAM,CAACoD,IAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMG,K;AAUN,eAAehD,cAAf","sourcesContent":["import React  from \"react\";\nimport styled from \"styled-components\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n\nclass CodingExercise extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {value: '',\n      rows: []\n    };\n\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n      this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n\n      var val = this.state.value;\n      var isPoundPresent = false;\n      var isSymbolPresent = false;\n\n      //validation of values starts with checking empty string.\n      if(val == '')\n      {\n        alert('Empty String');\n        return;\n      }\n         \n      //checking if £ symbol is present if yes then checking if it is at start position \n      //if £ symbol present but not at start positing then show error\n      if(val.indexOf('£') !== -1 ){\n        if(val.includes('£', 0))\n        {\n          console.log(val.substring(1,val.length));\n          val = val.substring(1,val.length);\n          isPoundPresent = true;\n          isSymbolPresent= true;\n        }\n        else\n        {\n          alert('Enter valid amount');\n          return;\n        }\n      }\n\n      //checking if p symbol is present if yes then checking if it is at start position \n      //if p symbol present but not at start positing then show error\n      if(val.indexOf('p') != -1)\n      {\n        if(val.includes('p', val.length-1))\n        {\n          console.log(val.substring(0,val.length-1));\n          val = val.substring(0,val.length-1);\n          isSymbolPresent= true;\n        }\n        else\n        {\n          alert('Enter valid amount');\n          return;\n        }\n      }\n\n      //after removing the symbols from entered value checking if still it is a valid number \n      //if not then show error according to the conditions if symbol is present then show different error.\n      if(isNaN(val))\n      {\n        if(!isSymbolPresent)\n          alert('Non-numeric, non-symbol character');\n        else\n          alert('Non-numeric, non-symbol character along with valid symbols');\n        return;\n      }\n      //checking if removing symbols still digits exists if not then show error.\n      else if(val == '')\n      {\n        alert('Missing digits');\n        return;\n      }\n\n      //if index of '.' is greater then 0 that means a digits is present before '.' which means £ is present.\n      if(val.indexOf('.') > 0)\n      {\n        isPoundPresent = true;\n      }\n      \n      //if £ is present then convert values to pennes.\n      if(isPoundPresent)\n        val = parseFloat(val*100);\n\n      \n      //defined a hardcoded array of required calculation against values are to be checked.\n      var arr = [200,100,50,20,10,5,2,1];\n\n      var updatedRows = [];\n      for (var i=0;i<arr.length;i++)\n      {\n        //dividing value against each value in array.\n        //if response is greater than 0 then add it in table rows and then multiply the response from divide with the array position value minus the actual value.\n        //update that to actual value and use that value to iterate other missing array elements.\n        var temp = parseInt(val/arr[i]);\n        if(temp!=\"0\")\n        {\n          console.log(arr[i] +\" \"+ temp);\n          val = val - (temp*arr[i]);\n          if(arr[i] == 100)\n            arr[i] = '₤1';\n          else if(arr[i] == 200)\n            arr[i] = '₤2';\n          else\n            arr[i] = arr[i]+'p';\n\n          updatedRows.push({name : arr[i], calories : temp});\n        }\n      }\n      //used state to update the rows dynamically\n      this.setState({\n        rows: updatedRows \n      });\n    }\nrender() {\n  return (\n\n    <Container>\n      <Title>Coding Exercise :</Title>\n      <ProblemStatement>Problem Statement :</ProblemStatement>\n      <Paragraph>\n        Write an application that given a number of pennies will calculate the\n        minimum number of Sterling coins equivalent to that amount.{\"\\n\"}Eg.\n        123p = 1 x £1, 1 x 20p, 1 x 2p, 1 x 1p\n      </Paragraph>\n\n      <form>\n      <Rect2>\n        <label style={{ marginTop:\"5%\"}}>\n          <InsertValue>Insert Value:</InsertValue>\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"button\" value=\"Submit\" onClick={() => this.handleSubmit()} style={{marginTop:\"5%\", width:\"15%\", marginLeft:\"60%\"}}/>\n        </Rect2>\n      </form>\n\n      <TableContainer >\n      <Table style={{width: '50%',backgroundColor:'rgba(95,75,139,1)',color: 'rgba(227,159,141,1)',marginLeft: '44px'}} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Sterling coins</TableCell>\n            <TableCell align=\"right\">Minimum number of Sterling coins</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {this.state.rows.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.calories}</TableCell>\n            </TableRow>\n          ))}\n          \n        </TableBody>\n      </Table>\n    </TableContainer>\n    </Container>\n    );\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  background-color: rgba(95,75,139,1);\n  flex-direction: column;\n  height: 100vh;\n  width: 100vw;\n`;\n\nconst Rect2 = styled.div`\n  width: 572px;\n  height: 179px;\n  background-color: rgba(227,159,141,1);\n  flex-direction: column;\n  display: flex;\n  margin-top: 50px;\n  margin-left: 44px;\n`;\n\nconst InsertValue = styled.span`\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 700;\n  color: rgba(95,75,139,1);\n  font-size: 18px;\n  margin-top: 46px;\n  margin-left: 14px;\n`;\n\nconst Paragraph = styled.span`\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 400;\n  color: rgba(227,159,141,1);\n  font-size: 20px;\n  margin-top: 20px;\n  margin-left: 44px;\n`;\n\nconst ProblemStatement = styled.span`\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 400;\n  color: rgba(227,159,141,1);\n  font-size: 31px;\n  margin-top: 20px;\n  margin-left: 44px;\n`;\n\nconst Title = styled.span`\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 400;\n  color: rgba(227,159,141,1);\n  font-size: 45px;\n  margin-top: 10px;\n  margin-left: 44px;\n`;\n\nexport default CodingExercise;\n"]},"metadata":{},"sourceType":"module"}